{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09ccd758.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**\r\n * UserStore\r\n */\r\nclass UserStore {\r\n    constructor() {\r\n        extendObservable(this, {\r\n\r\n            loading: true, \r\n            isLoggedIn: false,\r\n            username: ''\r\n\r\n        })\r\n    }\r\n}\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"inputField\">\r\n\r\n            <input \r\n                className='input'\r\n                type={this.props.type}\r\n                placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={ (e) => this.props.onChange(e.target.value) } /// pass value of input we access value through e.target.value\r\n            ></input>\r\n        </div>\r\n      );\r\n  } \r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"submitButton\">\r\n\r\n          <button\r\n            className ='btn'\r\n            disabled={this.props.disabled}\r\n            onClick={ () => this.props.onClick() }\r\n          >\r\n              {this.props.text}\r\n          </button>\r\n\r\n\r\n          \r\n        </div>\r\n      );\r\n  } \r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        username: '',\r\n        password: '',\r\n        buttonDisabled: false   //disabled while checking so no extra checking \r\n      }\r\n    }\r\n    \r\n    setInputValue(property, val) { // username or password  setting max length to 12 chars \r\n      val = val.trim();\r\n      if (val.length > 12) {\r\n        return;\r\n      }\r\n      this.setState({\r\n        [property]: val\r\n      })\r\n    }\r\n\r\n    resetForm() {\r\n      this.setState({\r\n        username: '',\r\n        password: '',\r\n        buttonDisabled: false\r\n      })\r\n    }\r\n\r\n    async doLogin() {\r\n\r\n      if (!this.state.username) {\r\n        return;\r\n      }\r\n      if (!this.state.password) {\r\n        return;\r\n      } \r\n      this.setState({\r\n        buttonDisabled: true\r\n      })\r\n\r\n      try{\r\n\r\n          let res = await fetch('/login', {\r\n            method: 'post',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n              username: this.state.username,\r\n              password: this.state.password\r\n            })\r\n          });\r\n\r\n          let result = await res.json();\r\n          if (result && result.success) {\r\n            UserStore.isLoggedIn = true;\r\n            UserStore.username = result.username;\r\n\r\n          } else if (result && result.success === false) {\r\n            this.resetForm();\r\n            alert(result.msg);\r\n          }\r\n      }\r\n      catch(e) {   /// if issue getting to API \r\n        console.log(e);\r\n        this.resetForm();  /// reset form \r\n      }\r\n    }\r\n\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"loginForm\">\r\n\r\n          Log in\r\n          <InputField \r\n            type='text'\r\n            placeholder='Username'\r\n            value={this.state.username ? this.state.username : ''}\r\n            onChange={ (val) => this.setInputValue('username', val) }\r\n          />\r\n\r\n          <InputField \r\n            type='password'\r\n            placeholder='Password'\r\n            value={this.state.password ? this.state.password : ''}\r\n            onChange={ (val) => this.setInputValue('password', val) }\r\n          />\r\n          <SubmitButton \r\n            text='Login'\r\n            disabled={this.state.buttonDisabled}\r\n            onClick={ () => this.doLogin() } // login \r\n          />\r\n\r\n        </div>\r\n      );\r\n  } \r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport UserStore from './stores/UserStore';\r\nimport LoginForm  from './LoginForm';\r\n\r\nimport SubmitButton  from './SubmitButton';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n          async componentDidMount() {\r\n\r\n            try {\r\n              let res = await fetch('/isLoggedIn', {\r\n                  method: 'post',\r\n                  headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  }\r\n              });\r\n\r\n              let result = await res.json();\r\n\r\n              if (result && result.success) {\r\n                UserStore.loading = false;\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            } else {\r\n              UserStore.loading = false;\r\n              UserStore.isLoggedIn = false; \r\n            }\r\n          }\r\n\r\n          catch(e) {\r\n            UserStore.loading = false;\r\n            UserStore.isLoggedIn = false;\r\n          }\r\n        }\r\n\r\n\r\n        async doLogout() {  //logout  \r\n\r\n          try {\r\n            let res = await fetch('/logout', {\r\n                method: 'post',\r\n                headers: {\r\n                  'Accept': 'application/json',\r\n                  'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            let result = await res.json();\r\n\r\n            if (result && result.success) {\r\n              UserStore.isLoggedIn = false;\r\n              UserStore.username = '';\r\n\r\n          } \r\n        }\r\n\r\n        catch(e) {\r\n          console.log(e)\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n      if (UserStore.loading) { // if loading \r\n        return (\r\n          <div className=\"app\">\r\n            <div className='container'>\r\n            Loading, please wait\r\n            </div> \r\n        </div>\r\n        );\r\n      } else { \r\n        if (UserStore.isLoggedIn) {  // if user is logged in \r\n          return (\r\n            <div className=\"app\">\r\n              <div className='container'>\r\n              Welcome (UserStore.username)\r\n\r\n                  <SubmitButton \r\n                    text={'Log out'}\r\n                    disabled={false}\r\n                    onClick={ () => this.doLogout() }  // call prop on click \r\n                  />\r\n              </div> \r\n          </div>\r\n          );\r\n        }\r\n          return (\r\n            <div className=\"app\">\r\n              <div className='container'>\r\n\r\n                <LoginForm />\r\n              </div>\r\n            </div>\r\n          );\r\n      }\r\n  } \r\n\r\n}\r\n\r\nexport default observer(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}